#include <gtest/gtest.h>
#include <vector>

#include "bignum.hpp"
#include "blind_signature.hpp"
#include "merklie_tree.hpp"
#include "pailier.hpp"
#include "zkp.hpp"

TEST(MultiprecisionArithmetic, IsBigNumClassWorks) {
    BigNum a("111");
    EXPECT_EQ(a.toString(), "111");
}

TEST(MultiprecisionArithmetic, SimpleMiltiprecisionOperations) {
    BigNum a("123456789012345678901234567890");
    BigNum b("98765432109876543210");

    BigNum sum = a + b;
    BigNum diff = a - b;
    BigNum prod = a * b;
    BigNum quot = a / b;
    BigNum mod = a % b;

    EXPECT_EQ(sum.toString(), "123456789111111111011111111100");
    EXPECT_EQ(diff.toString(), "123456788913580246791358024680");
    EXPECT_EQ(prod.toString(), "12193263113702179522496570642237463801111263526900");
    EXPECT_EQ(quot.toString(), "1249999988");
    EXPECT_EQ(mod.toString(), "60185185207253086410");
}

TEST(PailierCryptography, SimpleUsecase) {
    BigNum p("838382000974237847921957342377847823774311");
    BigNum q("113011");

    auto [n, lambda_val, g] = generate_keys(p, q);

    std::vector<BigNum> votes{
        BigNum(2).pow(BigNum(30 * 1)), BigNum(2).pow(BigNum(30 * 1)), BigNum(2).pow(BigNum(30 * 1)),
        BigNum(2).pow(BigNum(30 * 1)), BigNum(2).pow(BigNum(30 * 1)),
    };

    std::vector<BigNum> encrypted_votes{};

    for (auto m : votes) {
        encrypted_votes.push_back(encrypt(m, BigNum(113), g, n));
    }

    BigNum encc{1};
    BigNum t{0};
    BigNum nn = n * n;

    for (auto i : encrypted_votes) {
        encc = (encc * i) % nn;
    }

    BigNum decsum = decrypt(encc, g, lambda_val, n);

    EXPECT_EQ(decsum.toString(), "5368709120");
}

TEST(PailierCryptography, HardLoad) {
    BigNum p(
        "16404039174607693836360866480585614484544715780109420999587841911243314805066566626825650726886035765629970390"
        "89549681643050556549635257358690795777209850042468604069376784877781254003881410574446450853154325269463221049"
        "72494219200259177998517848835296770228674922695940834164143133401844103862534975584134053728686639397514762467"
        "32526677910766901702597914138830472395078921453562041777548374278654042973619250257136324320032842868953709957"
        "50844760980408776681372215036107346394928561229511548021683235453579706370411682264891424122924645293826133434"
        "7254820854775661531314072850103643102893024731790022431913878152973");
    BigNum q(
        "23219647663524783783061952253556607743994047212392754088058700334758166821038715748297093329096091346687489206"
        "95324558663385920747230458501903508583147162181811408006545125413126853731651034318627210953261740426151770560"
        "76238745310453632149821843456762026205270743082992379696423750382725025494340716199685885921910799273608419681"
        "77484098371092248391541096285306112533514081769996159382745839407298935713369226168221834895191608536626380517"
        "35977008912939366203350474415993611416870288265177308685927035403003390426076167871372164098999884567620311168"
        "9059473305477120308757035114933199394449803026640152763363652056511");

    auto [n, lambda_val, g] = generate_keys(p, q);

    std::vector<BigNum> votes{
        BigNum(2).pow(BigNum(30 * 1)), BigNum(2).pow(BigNum(30 * 1)), BigNum(2).pow(BigNum(30 * 1)),
        BigNum(2).pow(BigNum(30 * 1)), BigNum(2).pow(BigNum(30 * 1)),
    };

    std::vector<BigNum> encrypted_votes{};

    for (auto m : votes) {
        encrypted_votes.push_back(encrypt(m, BigNum(113), g, n));
    }

    BigNum encc{1};
    BigNum t{0};
    BigNum nn = n * n;

    for (auto i : encrypted_votes) {
        encc = (encc * i) % nn;
    }

    BigNum decsum = decrypt(encc, g, lambda_val, n);

    EXPECT_EQ(decsum.toString(), "5368709120");
}

TEST(BlindSignature, SimpleTest) {
    try {
        // std::cout << "üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π RSA..." << std::endl;
        RSAKeyPair rsa;

        std::string message = "Hello, Blind Signature!";
        // std::cout << "–°–æ–æ–±—â–µ–Ω–∏–µ: '" << message << "'" << std::endl;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ BigNum
        BigNum m = BlindSignature::messageToBigNum(message);

        // std::cout << "\nüîπ –û—Å–ª–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è..." << std::endl;
        auto [m_blinded, r] = BlindSignature::blind(m, rsa.publicKey.e, rsa.publicKey.n);

        // std::cout << "\nüîπ –ü–æ–¥–ø–∏—Å—å –æ—Å–ª–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è..." << std::endl;
        BigNum s_blinded = BlindSignature::signBlinded(m_blinded, rsa.privateKey.d, rsa.publicKey.n);

        // std::cout << "\nüîπ –°–Ω—è—Ç–∏–µ –æ—Å–ª–µ–ø–ª–µ–Ω–∏—è..." << std::endl;
        BigNum signature = BlindSignature::unblind(s_blinded, r, rsa.publicKey.n);

        // std::cout << "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: " << signature.toString() << std::endl;

        // std::cout << "\nüîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏..." << std::endl;
        [[maybe_unused]] bool is_valid = BlindSignature::verify(m, signature, rsa.publicKey.e, rsa.publicKey.n);
        // std::cout << "–ü–æ–¥–ø–∏—Å—å " << (is_valid ? "–≤–µ—Ä–Ω–∞" : "–Ω–µ–≤–µ—Ä–Ω–∞") << "!" << std::endl;

    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞: " << e.what() << std::endl;
    }
}

TEST(ZKP, SimpleTest2) {
    try {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
        BigNum p("838382000974237847921957342377847823774311");
        BigNum q("113011");
        BigNum n = p * q;
        BigNum lambdaVal = lcm(p - BigNum(1), q - BigNum(1));
        BigNum g = n + BigNum(1);

        // –í–∞—Ä–∏–∞–Ω—Ç—ã –≥–æ–ª–æ—Å–æ–≤ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º–∏)
        std::vector<BigNum> voteVariants;
        for (int i = 0; i < 4; ++i) {
            voteVariants.push_back(BigNum(2).pow(BigNum(30 * i)));
        }

        // –¢–µ—Å—Ç–æ–≤—ã–µ –≥–æ–ª–æ—Å–∞ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ voteVariants)
        std::vector<BigNum> votes;
        for (int i = 0; i < 5; ++i) {
            votes.push_back(BigNum(2).pow(BigNum(30 * 1)));
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –≥–æ–ª–æ—Å–∞ –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        /*
        for (const auto& vote : votes) {
            if (std::find(voteVariants.begin(), voteVariants.end(), vote) == voteVariants.end()) {
                throw std::runtime_error("–ì–æ–ª–æ—Å –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã");
            }
        }
        */

        // –ü—Ä–æ—Ü–µ—Å—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏
        std::vector<BigNum> encryptedVotes;
        std::vector<CorrectMessageProof> proofs;

        for (const auto& m : votes) {
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
            CorrectMessageProof proof = CorrectMessageProof::prove(n, voteVariants, m);
            proofs.push_back(proof);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—ç—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—å)
            if (!proof.verify()) {
                throw std::runtime_error("–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É");
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å
            encryptedVotes.push_back(proof.getCiphertext());

            std::cout << "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å: " << proof.getCiphertext().toString() << std::endl;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –±—é–ª–ª–µ—Ç–µ–Ω–µ–π –ø–µ—Ä–µ–¥ –ø–æ–¥—Å—á–µ—Ç–æ–º
        std::cout << "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –±—é–ª–ª–µ—Ç–µ–Ω–µ–π –ø–µ—Ä–µ–¥ –ø–æ–¥—Å—á–µ—Ç–æ–º:" << std::endl;
        for (size_t i = 0; i < proofs.size(); ++i) {
            if (!proofs[i].verify()) {
                std::cout << "–ë—é–ª–ª–µ—Ç–µ–Ω—å " << i << " –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É!" << std::endl;
            } else {
                std::cout << "–ë—é–ª–ª–µ—Ç–µ–Ω—å " << i << " –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω" << std::endl;
            }
        }

        // –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤ (–≥–æ–º–æ–º–æ—Ä—Ñ–Ω–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ)
        BigNum encryptedSum(1);
        for (const auto& vote : encryptedVotes) {
            encryptedSum = (encryptedSum * vote) % (n * n);
        }

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—É–º–º—ã
        BigNum numerator = ((encryptedSum.modExp(lambdaVal, n * n) - BigNum(1)) / n) % n;
        BigNum denominator = ((g.modExp(lambdaVal, n * n) - BigNum(1)) / n) % n;
        BigNum decryptedSum = (numerator * denominator.modInverse(n)) % n;

        std::cout << "–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " << decryptedSum.toString() << std::endl;

    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞: " << e.what() << std::endl;
    }
}

TEST(MerklieTree, SimpleUsage) {
    MerkleTree a;
    a.addLeaf("1234");
    a.addLeaf("12345");
    a.addLeaf("12346");
    a.addLeaf("12347");
    a.addLeaf("12348");
    a.addLeaf("12349");

    EXPECT_EQ(a.getRoot(),
              "5816f1c61fa426728ee36f4275256c45855f1e5df157271d1411693a8ed47c92ab52a3ac8a4e9df6acccaa04405c4ff44710846d"
              "7ea0fe30ff364a42effa854d");

    std::string input = "12349";

    EVP_MD_CTX* mdctx = EVP_MD_CTX_new();
    const EVP_MD* md = EVP_sha512();
    unsigned char hash[SHA512_DIGEST_LENGTH];
    unsigned int hash_len;

    EVP_DigestInit_ex(mdctx, md, nullptr);
    EVP_DigestUpdate(mdctx, input.c_str(), input.size());
    EVP_DigestFinal_ex(mdctx, hash, &hash_len);
    EVP_MD_CTX_free(mdctx);

    std::stringstream ss;
    for (int i = 0; i < SHA512_DIGEST_LENGTH; i++) {
        ss << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(hash[i]);
    }

    std::string hex_ = ss.str();

    auto b = a.getProof(hex_);

    EXPECT_EQ(b.size(), static_cast<size_t>(2));
    EXPECT_EQ(b[0].first,
              "2de2b0c9e6e6765d8000d0d6532759789eece2c60563a8ce6a0da857d0337b1c754e5606c5dfb73c37697110db0da1123505310b"
              "4e9938976c2010b81ef81a1e");
    EXPECT_EQ(b[1].first,
              "8f54cde82fc63dd8f19047de1e8ba5319df1d45164f5506136b5a25838603a4a950c5a813851c1cf4a8dc2351f3c53a37497ff52"
              "889c050009847507511c6d9a");
    EXPECT_EQ(b[0].second, false);
    EXPECT_EQ(b[1].second, false);

    a.removeLeaf(hex_);

    EXPECT_EQ(a.getRoot(),
              "2a7b999456d176eed8f89997b665b602f193848dd616163f595ff054beda97d3fdd2346f123dc33e8a0c377e1b35bad9daa2c0ee"
              "9105fc764c3d4f0ec89cc2b3");

    std::ofstream outFile("merkle_tree.json");

    if (outFile.is_open()) {
        a.serialize(outFile);
        outFile.close();
    }
}

TEST(ZKP, AdditionalProves) {
    BigNum n(
        "38089600989304856086482318810723385896398240399689251567738501021439968074673025185637718386773707987978862422"
        "67677600150494432732161976784259269558511239516800459104383252101833414465255197326164953899416567749993382091"
        "21700543549400831719887789241885970910418134252817104741423771936821996129601753666411089803077304575969167078"
        "59608347774056660632112757816357021810663233532786700823093142131312966893811779468000268206241471259761003324"
        "37844128909320789953256452446064353820242912507286596714131455126286864625152105491631713049552659496031396319"
        "64298586781973910155230496914147236961035678634158527659716556090467815377731835032074071006141116987097028583"
        "49482192882021430063343748979457570607514318162730455178913056329323787430103514045390151591166676401775995241"
        "24986880481015763601429120152938982063824363613353922513313635531188441310899122538291679559678457087915735890"
        "35275802365027223503811223794495306140657344210614574188880970705676011397756033435333448815707274737506211413"
        "06666639412397985123660455515065530656649359014682756795574228730414835770190143430298742053945803172589064416"
        "48785690054977035147489001541460437192841504074323578110000830029934258704211681936207762622919306759388206295"
        "65305882369105698657203");
    BigNum r(
        "35953396622341259697392097159890009014450029417622494475727941954399820003416826239234390908179285840402713125"
        "76810825596898745432854636693997564874734449642181880025222541672839265780601964351569922533391823935841458105"
        "18648923478044484432199732770675851311290015434692944024389911556707940183210671958162993404987445204183897487"
        "92654976563868272816787606213569589586776715541437400411234721246665611609297390783550558901965645540413925920"
        "72625246308600356803452827381697973260811209676135309428150132956608955009571724631436169585883081598359333727"
        "44518078213449807016310378397821405852946479944451987944968371093409989428847991185409801318022936358740821341"
        "69134603186220423816279782781460647663150113529559322920216444445955235131659864031175019890038840251449689627"
        "34216313944531687428631344327669825291528027267192040610019186663291512619975696995638389563744028470399541843"
        "22797386598659361712124834916068990216550883201248699719293852310486755614989868369730387819349554076427915041"
        "08721186929892370667821475100541471295525363169749049387513191214184813025419874784514712731994936576114176895"
        "41691038761468289071274371720919609496331869780584007065324450712561704938325429976596491762663377972360175678"
        "92233713282929882799516");

    std::vector<BigNum> ziVec{
        BigNum("2688801682606371159938831921258882128556510057455760956723139190684410637509491478294698267626989034971"
               "3095792096042268094101694411144552128641476111675377796047565682537350599563638064254620408078110300644"
               "1648770342128162054848769888077360520864472208149278278043035335542760073619703017311185914753663208399"
               "7239636209628737353822067213630687655748432153513885688913427947014629578477737189811297826485677293873"
               "6260120845949261983227280718052915099510045350492883951379401585973643933163408869740098775875950576718"
               "7974215105992593432455023069976702521434697298002990592678708718302471487141644707845954754988796363929"
               "8188147697108667996570472744186899198185838340260411957872867468011982906807216753515213200414192906154"
               "5728068508560177273925320999111202782058332529395934949467936018977831816483943466131179824678179343659"
               "4265350006917073002837578049936273432311151799408818496446600635384488792829763496489894738267888903910"
               "9828488428960342800415394058529464000752493441554490499984501726426658832410866320569071154725016016566"
               "6478732869308401523937456697466151120102315075954849337608242616453363567882789130299534872364639488089"
               "7173180215288950792453133558190923325189163489099540749843692833842703643820950965342202140033732924"),
        BigNum("3336934662529059960160415103882793119890212520509247636014275581770310999436923143938323774308370963842"
               "7397545447992955970958391669826231014059421882386877593046184927337253758083340008336445542486226853782"
               "9286231666652977646146662138740606431754439901752058776019101497755046840781338672939874513417544517410"
               "2057942891130817195711582790692475804389415605181434791780096293432868754262087981850535451797934464677"
               "6989881059422375714741231746234203995423070747809421519116203505439363926984370125341709786140850556542"
               "8176945089814289766487383115718850268516847314380814500115967462380599915154506187781572014658048912552"
               "5388425143062922854237823572726764335980270612077719426153054182721148251714239309014975188687701557470"
               "2816332727935068641914479310248002369160303624515209592908704318454016871555130862179864832409760500323"
               "7654200502615613378538655852646309913297864928831636982353394323166545261747507656988703243605517453542"
               "3125201647842434814682074909183757755503183638607657045793464324134716423851903199774137111628507749570"
               "2063034377023201149089642324471749038314636507233614628296992474651871515840938875109741094526560762265"
               "5875983692094964847440030344320663173041963322348223830498343594470570735272606190610507895781177016"),
    };

    std::vector<BigNum> eiVec{BigNum("59714907935495384959373816938542253076844762614965137447937633838495991593859"),
                              BigNum("36080150931969705165046149277423954153533041469005367136604126167357249174719")};

    BigNum w(
        "19407448238496638905025570824209194475161428462687034980268180023169570806723393225788776939210432404231347523"
        "76917489112965143287096869494324705162182884933249702527950632694055716573481725775937566439727096894328815573"
        "58812601655985057334315068090440086787385641898024504021673163609058622365123159605081807141889885443852513713"
        "39922338121284418294476788905818399919708194690198619983124842707396846659288844611843622372126711622271690661"
        "79238365049847849298975819342844487176827608427198486178450018793300422033828470667760270424591273871807285170"
        "00468683102478303848418354395137958711550199123119204978418897512930732076151446462162389681658775764759987942"
        "84747506533670091376573992468898405656124749159366472188713698504394804911186541157285686175790425719049666331"
        "53956440223579853093739666768550388792602635616246710222488982619995054109353677753414689528273934668219045377"
        "60874616280911225433690665598732591386845005570246060722002296420546087483076903213992805494985401517452737173"
        "98532700165112816286057113072248237442579937878629225270527337919403398005039750280735631004399250672626227395"
        "82128856968715768103516585221258128609566638570935411345684839248178094719655662292675638514775732565590207434"
        "63339200335000524507330");

    std::vector<BigNum> msgVariants;
    for (size_t i = 0; i < 3; i++) {
        msgVariants.push_back(BigNum(2).pow(BigNum(30 * i)));
    }

    BigNum msgToEnc = BigNum(1);
    BigNum encryptedMessage = BigNum(
        "11517792089440724851777602033019991560835843832684658289904861066887613659323805755390168663525282995523517495"
        "83702651733648074656684685664771508177311898482910927396560833584375073482166059771072575792101519150148670156"
        "51754505704514768971355967130774061589769278970727742734894137520691399215070856547388340938507518113359879663"
        "82049773006523665156947459604964968064633538897508510776312693036750381887790205949114990133402536041246518363"
        "04542493542207285069869894158335671909098218782164786759404777419078376929675427975371466741384987039409877355"
        "94161727057071983564884238196743048335886382267934033837685489778234015873540680622805285293151159696482115963"
        "95238490487419570183106555341209173155010443228874206192017739031284771818528827775236131414005266110348170708"
        "19939131646046019066706984192101711278100308055704144036502378396038859293159981766859960079103894842484230998"
        "88714605945944958035026667498573206655798926635369210642618881223552649335902354109482263924831718882351616270"
        "35358369408280622914460141503442212650849250152451283138774079145330814274778713040176304343177227651117674520"
        "51203247993610597699667694662303412123604581173343191640680717002760373386945971708571223388744560213607852675"
        "66035449928461804763703222152987498602079041395678299040497250078268063040042757026569713129772788491720996257"
        "41103964021285784708862443461889464258751369844746524362735035851195868033098667066988092233152292912098141546"
        "18277812672979716230287361702615064766461669320015827928943446876073303527606454374566405058425535889160097829"
        "07387183418990733922284068374651858186002374210531714777341180290043551255366734972962502731826399074020273987"
        "29608079262782963422704242398378022809334145606124753176832795099895423882042918485425562481086810144353030507"
        "34709757220628548650593987305119581397479412020282463698851824489653028511767141055868879099854033914759184729"
        "56027671476367526233400024619890230506948672681646206736703037319072717020807173146959675260874226539267168700"
        "64827490671452150529605673962929366197686231831533497863919997543754251155043074379508315677834876803541022281"
        "47119551271900413880481228580431349303966351497154444981057392096704425183614742705058739002213780880499272242"
        "37844921675093402561487760725573544156085453215722642099152585885770859248544769448685610732372599722615926511"
        "87518937026079237378555005502889130349237050024154600540700959407745466470440584734688621159887464548342641139"
        "8646545188458907418449689889646387589176182165");

    CorrectMessageProof proof1(r, ziVec, w, n, msgVariants, msgToEnc);

    CorrectMessageProof proof2(r, ziVec, eiVec, w, encryptedMessage, 0, msgVariants, n);

    std::cout << "proof.verify: " << proof2.verify();
    std::cout << "\n";
    std::cout << "\n";

    auto aVec = proof2.getA();
    auto zVec = proof2.getZ();
    auto eVec = proof2.getE();

    for (const auto& i : aVec) {
        std::cout << i.toString() << "\n";
    }
    std::cout << "\n";
    std::cout << "\n";

    for (const auto& i : eVec) {
        std::cout << i.toString() << "\n";
    }
    std::cout << "\n";
    std::cout << "\n";

    for (const auto& i : zVec) {
        std::cout << i.toString() << "\n";
    }
    std::cout << "\n";
    std::cout << "\n";

    EXPECT_EQ(1, 1);
}

int main(int argc, char** argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}